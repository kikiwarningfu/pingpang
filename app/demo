   animation_view_network=(LottieAnimationView)findViewById(R.id.animation_view_network);
        loadUrl("http://www.chenailing.cn/EmptyState.json");


          private void loadUrl(String url) {
                Request request;
                try {
                    request = new Request.Builder()
                            .url(url)
                            .build();
                } catch (IllegalArgumentException e) {
                    return;
                }


                if (client == null) {
                    client = new OkHttpClient();
                }
                client.newCall(request).enqueue(new Callback() {
                    @Override public void onFailure(Call call, IOException e) {

                    }

                    @Override public void onResponse(Call call, Response response) throws IOException {
                        if (!response.isSuccessful()) {
                        }

                        try {
                            JSONObject json = new JSONObject(response.body().string());
                            LottieComposition
                                    .fromJson(getResources(), json, new LottieComposition.OnCompositionLoadedListener() {
                                        @Override
                                        public void onCompositionLoaded(LottieComposition composition) {
                                            setComposition(composition);
                                        }
                                    });
                        } catch (JSONException e) {
                        }
                    }
                });
            }

            private  void setComposition(LottieComposition composition){
                animation_view_network.setProgress(0);
                animation_view_network.loop(true);
                animation_view_network.setComposition(composition);
                animation_view_network.playAnimation();
            }

            @Override
            protected void onStop() {
                super.onStop();
                animation_view_network.cancelAnimation();
            }
//--------------------------------------------------------------------------单击开始
    private Button button1,button2;
    private TextView tv_seek;
    LottieAnimationView animation_view_click;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_click);

        animation_view_click=(LottieAnimationView)findViewById(R.id.animation_view_click);
        tv_seek=(TextView)findViewById(R.id.tv_seek);

        button1=(Button)findViewById(R.id.button1);
        button2=(Button)findViewById(R.id.button2);

        button1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                startAnima();
            }
        });
        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                stopAnima();
            }
        });
        LottieComposition.fromAssetFileName(this, "LottieLogo1.json", new LottieComposition.OnCompositionLoadedListener() {

            @Override
            public void onCompositionLoaded(LottieComposition composition) {
                animation_view_click.setComposition(composition);
                animation_view_click.setProgress(0.333f);

                animation_view_click.playAnimation();
            }
        });


        animation_view_click.addAnimatorUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                tv_seek.setText(" 动画进度" +(int) (animation.getAnimatedFraction()*100) +"%");
            }
        });
    }

    /*
     * 开始动画
     */
    private  void startAnima(){

        boolean inPlaying = animation_view_click.isAnimating();
        if (!inPlaying) {
            animation_view_click.setProgress(0f);
            animation_view_click.playAnimation();
        }
    }
    /*
    * 停止动画
    */
    private  void stopAnima(){
        boolean inPlaying = animation_view_click.isAnimating();
        if (inPlaying) {
            animation_view_click.cancelAnimation();
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        animation_view_click.cancelAnimation();
    }
